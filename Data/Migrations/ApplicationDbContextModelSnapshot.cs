// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using comp4976_assignment1.Data;

#nullable disable

namespace comp4976_assignment1.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.12");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "22c32e6b-94c6-493f-8c0b-6881d05996d3",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "4b9bdaaa-6298-4fd6-834c-b2674146f5c7",
                            Name = "Finance",
                            NormalizedName = "FINANCE"
                        },
                        new
                        {
                            Id = "5ca9f48a-bf39-496f-af6c-43763224f634",
                            Name = "Member",
                            NormalizedName = "MEMBER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "4fb939b4-fe56-4947-ac11-71e4fdfa4604",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "58912317-ed39-4297-867e-fdd704ab8aec",
                            Email = "aa@aa.aa",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "AA@AA.AA",
                            NormalizedUserName = "AA@AA.AA",
                            PasswordHash = "AQAAAAIAAYagAAAAEK46JWMfMtcPkAyj9ADXwVfLWCapRs2a/XJSvBfTT0dKnfhtqfDDOtiLA9tbNXxsOA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d309c4f8-5a38-448d-a2b3-bdb12e90d499",
                            TwoFactorEnabled = false,
                            UserName = "aa@aa.aa"
                        },
                        new
                        {
                            Id = "1bdddf2f-9523-466e-89b0-2b4553df4160",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c4afb918-1ac7-4aab-a8d2-24d11e834d64",
                            Email = "mm@mm.mm",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "MM@MM.MM",
                            NormalizedUserName = "MM@MM.MM",
                            PasswordHash = "AQAAAAIAAYagAAAAEGOdLP0qeMK5uSbUmBeVsjiiRfKrME6lGpc5KMVFxgq/dwfl0F/VDoacqfuDirmAGw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "38baad5f-1484-4ec4-b577-6fc28e0aaa65",
                            TwoFactorEnabled = false,
                            UserName = "mm@mm.mm"
                        },
                        new
                        {
                            Id = "f978fd19-279c-4bfa-96ef-bcdf15b10abc",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8b301935-3e08-450f-a957-12933270c5fd",
                            Email = "ff@ff.ff",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "FF@FF.FF",
                            NormalizedUserName = "FF@FF.FF",
                            PasswordHash = "AQAAAAIAAYagAAAAEByp/JGL//EgWWjelyirelNiByRQ6Id4/CSl+eFQBH5a23wq2EhgkMvSIzOjTGL6VQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6afc8869-9fcf-414c-9906-d595e6159bf9",
                            TwoFactorEnabled = false,
                            UserName = "ff@ff.ff"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "4fb939b4-fe56-4947-ac11-71e4fdfa4604",
                            RoleId = "22c32e6b-94c6-493f-8c0b-6881d05996d3"
                        },
                        new
                        {
                            UserId = "1bdddf2f-9523-466e-89b0-2b4553df4160",
                            RoleId = "5ca9f48a-bf39-496f-af6c-43763224f634"
                        },
                        new
                        {
                            UserId = "f978fd19-279c-4bfa-96ef-bcdf15b10abc",
                            RoleId = "4b9bdaaa-6298-4fd6-834c-b2674146f5c7"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("comp4976_assignment1.Models.ContactList", b =>
                {
                    b.Property<int>("AccountNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("TEXT");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("AccountNo");

                    b.ToTable("ContactList", (string)null);

                    b.HasData(
                        new
                        {
                            AccountNo = 1,
                            City = "New York",
                            Country = "USA",
                            Created = new DateTime(2023, 10, 15, 21, 43, 2, 752, DateTimeKind.Local).AddTicks(4830),
                            CreatedBy = "Seed",
                            Email = "johndoe@example.com",
                            FirstName = "John",
                            LastName = "Doe",
                            Modified = new DateTime(2023, 10, 15, 21, 43, 2, 752, DateTimeKind.Local).AddTicks(4890),
                            ModifiedBy = "Seed",
                            PostalCode = "V5T 2W8",
                            Street = "123 Main St"
                        },
                        new
                        {
                            AccountNo = 2,
                            City = "Richmond",
                            Country = "Canada",
                            Created = new DateTime(2023, 10, 15, 21, 43, 2, 752, DateTimeKind.Local).AddTicks(4890),
                            CreatedBy = "Seed",
                            Email = "sam@fox.com",
                            FirstName = "Sam",
                            LastName = "Fox",
                            Modified = new DateTime(2023, 10, 15, 21, 43, 2, 752, DateTimeKind.Local).AddTicks(4900),
                            ModifiedBy = "Seed",
                            PostalCode = "V4F 1M7",
                            Street = "457 Fox Avenue"
                        },
                        new
                        {
                            AccountNo = 3,
                            City = "Delta",
                            Country = "Canada",
                            Created = new DateTime(2023, 10, 15, 21, 43, 2, 752, DateTimeKind.Local).AddTicks(4900),
                            CreatedBy = "Seed",
                            Email = "ann@day.com",
                            FirstName = "Ann",
                            LastName = "Day",
                            Modified = new DateTime(2023, 10, 15, 21, 43, 2, 752, DateTimeKind.Local).AddTicks(4900),
                            ModifiedBy = "Seed",
                            PostalCode = "V6G 1M6",
                            Street = "231 River Road"
                        });
                });

            modelBuilder.Entity("comp4976_assignment1.Models.Donations", b =>
                {
                    b.Property<int>("TransId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AccountNo")
                        .HasColumnType("INTEGER");

                    b.Property<float>("Amount")
                        .HasColumnType("REAL");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("TEXT");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<int>("PaymentMethodId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TransactionTypeId")
                        .HasColumnType("INTEGER");

                    b.HasKey("TransId");

                    b.HasIndex("AccountNo");

                    b.HasIndex("PaymentMethodId");

                    b.HasIndex("TransactionTypeId");

                    b.ToTable("Donations", (string)null);

                    b.HasData(
                        new
                        {
                            TransId = 1,
                            AccountNo = 1,
                            Amount = 100f,
                            Created = new DateTime(2023, 10, 15, 21, 43, 2, 752, DateTimeKind.Local).AddTicks(5020),
                            CreatedBy = "Seed",
                            Date = new DateTime(2023, 10, 15, 21, 43, 2, 752, DateTimeKind.Local).AddTicks(5010),
                            Modified = new DateTime(2023, 10, 15, 21, 43, 2, 752, DateTimeKind.Local).AddTicks(5020),
                            ModifiedBy = "Seed",
                            Notes = "This is a first donation",
                            PaymentMethodId = 1,
                            TransactionTypeId = 1
                        },
                        new
                        {
                            TransId = 2,
                            AccountNo = 2,
                            Amount = 100f,
                            Created = new DateTime(2023, 10, 15, 21, 43, 2, 752, DateTimeKind.Local).AddTicks(5020),
                            CreatedBy = "Seed",
                            Date = new DateTime(2023, 10, 15, 21, 43, 2, 752, DateTimeKind.Local).AddTicks(5020),
                            Modified = new DateTime(2023, 10, 15, 21, 43, 2, 752, DateTimeKind.Local).AddTicks(5030),
                            ModifiedBy = "Seed",
                            Notes = "This is a second donation",
                            PaymentMethodId = 1,
                            TransactionTypeId = 2
                        },
                        new
                        {
                            TransId = 3,
                            AccountNo = 3,
                            Amount = 100f,
                            Created = new DateTime(2023, 10, 15, 21, 43, 2, 752, DateTimeKind.Local).AddTicks(5030),
                            CreatedBy = "Seed",
                            Date = new DateTime(2023, 10, 15, 21, 43, 2, 752, DateTimeKind.Local).AddTicks(5030),
                            Modified = new DateTime(2023, 10, 15, 21, 43, 2, 752, DateTimeKind.Local).AddTicks(5030),
                            ModifiedBy = "Seed",
                            Notes = "This is a third donation",
                            PaymentMethodId = 1,
                            TransactionTypeId = 3
                        });
                });

            modelBuilder.Entity("comp4976_assignment1.Models.PaymentMethod", b =>
                {
                    b.Property<int>("PaymentMethodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("TEXT");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("PaymentMethodId");

                    b.ToTable("PaymentMethod", (string)null);

                    b.HasData(
                        new
                        {
                            PaymentMethodId = 1,
                            Created = new DateTime(2023, 10, 15, 21, 43, 2, 752, DateTimeKind.Local).AddTicks(4970),
                            CreatedBy = "Seed",
                            Modified = new DateTime(2023, 10, 15, 21, 43, 2, 752, DateTimeKind.Local).AddTicks(4970),
                            ModifiedBy = "Seed",
                            Name = "Credit Card"
                        },
                        new
                        {
                            PaymentMethodId = 2,
                            Created = new DateTime(2023, 10, 15, 21, 43, 2, 752, DateTimeKind.Local).AddTicks(4970),
                            CreatedBy = "Seed",
                            Modified = new DateTime(2023, 10, 15, 21, 43, 2, 752, DateTimeKind.Local).AddTicks(4970),
                            ModifiedBy = "Seed",
                            Name = "PayPal"
                        },
                        new
                        {
                            PaymentMethodId = 3,
                            Created = new DateTime(2023, 10, 15, 21, 43, 2, 752, DateTimeKind.Local).AddTicks(4980),
                            CreatedBy = "Seed",
                            Modified = new DateTime(2023, 10, 15, 21, 43, 2, 752, DateTimeKind.Local).AddTicks(4980),
                            ModifiedBy = "Seed",
                            Name = "Debit Card"
                        });
                });

            modelBuilder.Entity("comp4976_assignment1.Models.TransactionType", b =>
                {
                    b.Property<int>("TransactionTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("TEXT");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("TransactionTypeId");

                    b.ToTable("TransactionType", (string)null);

                    b.HasData(
                        new
                        {
                            TransactionTypeId = 1,
                            Created = new DateTime(2023, 10, 15, 21, 43, 2, 752, DateTimeKind.Local).AddTicks(4990),
                            CreatedBy = "Seed",
                            Description = "Donations made without any special purpose",
                            Modified = new DateTime(2023, 10, 15, 21, 43, 2, 752, DateTimeKind.Local).AddTicks(4990),
                            ModifiedBy = "Seed",
                            Name = "General Donation"
                        },
                        new
                        {
                            TransactionTypeId = 2,
                            Created = new DateTime(2023, 10, 15, 21, 43, 2, 752, DateTimeKind.Local).AddTicks(5000),
                            CreatedBy = "Seed",
                            Description = "Donations made for homeless people",
                            Modified = new DateTime(2023, 10, 15, 21, 43, 2, 752, DateTimeKind.Local).AddTicks(5000),
                            ModifiedBy = "Seed",
                            Name = "Food for homeless"
                        },
                        new
                        {
                            TransactionTypeId = 3,
                            Created = new DateTime(2023, 10, 15, 21, 43, 2, 752, DateTimeKind.Local).AddTicks(5000),
                            CreatedBy = "Seed",
                            Description = "Donations for the purpose of upgrading the gym",
                            Modified = new DateTime(2023, 10, 15, 21, 43, 2, 752, DateTimeKind.Local).AddTicks(5000),
                            ModifiedBy = "Seed",
                            Name = "Repair of Gym"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("comp4976_assignment1.Models.Donations", b =>
                {
                    b.HasOne("comp4976_assignment1.Models.ContactList", "ContactList")
                        .WithMany()
                        .HasForeignKey("AccountNo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("comp4976_assignment1.Models.PaymentMethod", "PaymentMethod")
                        .WithMany()
                        .HasForeignKey("PaymentMethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("comp4976_assignment1.Models.TransactionType", "TransactionType")
                        .WithMany()
                        .HasForeignKey("TransactionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ContactList");

                    b.Navigation("PaymentMethod");

                    b.Navigation("TransactionType");
                });
#pragma warning restore 612, 618
        }
    }
}
