// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using comp4976_assignment1.Data;

#nullable disable

namespace comp4976_assignment1.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20231016043640_M1")]
    partial class M1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.12");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "89219bba-76a2-4d33-b975-e8065fa930fa",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "8167bd00-bcd9-4f2e-aa34-273f30c6f879",
                            Name = "Finance",
                            NormalizedName = "FINANCE"
                        },
                        new
                        {
                            Id = "6e786b69-46c5-4fc9-be40-3e64fce77bf7",
                            Name = "Member",
                            NormalizedName = "MEMBER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "fb5f9f49-3dce-4300-98be-698daae96321",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d93340cb-9325-4d4e-b62b-2c17b70f3ae1",
                            Email = "aa@aa.aa",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "AA@AA.AA",
                            NormalizedUserName = "AA@AA.AA",
                            PasswordHash = "AQAAAAIAAYagAAAAEKoXzYVqSJqgUrZqWJZndW9PPI946xFNboXLk141/SnWakcYgEFsZEzdqyxibpYbhg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c74f4519-9c68-4a12-9039-2f4a0e76dc66",
                            TwoFactorEnabled = false,
                            UserName = "aa@aa.aa"
                        },
                        new
                        {
                            Id = "9f7a8124-2d1d-4cc9-931e-88e74a9b80be",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "89815bf5-d76d-49a3-b70d-71416248baf8",
                            Email = "mm@mm.mm",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "MM@MM.MM",
                            NormalizedUserName = "MM@MM.MM",
                            PasswordHash = "AQAAAAIAAYagAAAAEOkTZsTY2vQCKmieG6v5jPV0T9f01xZPuZcxN8TJBXunuDcwTJQSeD6ILqpU6XQJ1A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d9ea86ab-c6e1-49bd-8693-608f257fbd5e",
                            TwoFactorEnabled = false,
                            UserName = "mm@mm.mm"
                        },
                        new
                        {
                            Id = "9f5c5e7d-50d5-48ab-ab8a-99a9387967d7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "99e1f1c1-ed49-4451-b3ae-a1580bd30a94",
                            Email = "ff@ff.ff",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "FF@FF.FF",
                            NormalizedUserName = "FF@FF.FF",
                            PasswordHash = "AQAAAAIAAYagAAAAENN4puX8Et665gVmQKA9Kmuuxzj1/jU6sng7LOpXA+4ftjgWKhf6bxAzDRLlG/Jd+g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "edc25bc2-b8d4-4549-9388-ba0c3ec31687",
                            TwoFactorEnabled = false,
                            UserName = "ff@ff.ff"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "fb5f9f49-3dce-4300-98be-698daae96321",
                            RoleId = "89219bba-76a2-4d33-b975-e8065fa930fa"
                        },
                        new
                        {
                            UserId = "9f7a8124-2d1d-4cc9-931e-88e74a9b80be",
                            RoleId = "6e786b69-46c5-4fc9-be40-3e64fce77bf7"
                        },
                        new
                        {
                            UserId = "9f5c5e7d-50d5-48ab-ab8a-99a9387967d7",
                            RoleId = "8167bd00-bcd9-4f2e-aa34-273f30c6f879"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("comp4976_assignment1.Models.ContactList", b =>
                {
                    b.Property<int>("AccountNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("TEXT");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("AccountNo");

                    b.ToTable("ContactList", (string)null);

                    b.HasData(
                        new
                        {
                            AccountNo = 1,
                            City = "New York",
                            Country = "USA",
                            Created = new DateTime(2023, 10, 15, 21, 36, 40, 559, DateTimeKind.Local).AddTicks(8928),
                            CreatedBy = "Seed",
                            Email = "johndoe@example.com",
                            FirstName = "John",
                            LastName = "Doe",
                            Modified = new DateTime(2023, 10, 15, 21, 36, 40, 559, DateTimeKind.Local).AddTicks(8986),
                            ModifiedBy = "Seed",
                            PostalCode = "V5T 2W8",
                            Street = "123 Main St"
                        },
                        new
                        {
                            AccountNo = 2,
                            City = "Richmond",
                            Country = "Canada",
                            Created = new DateTime(2023, 10, 15, 21, 36, 40, 559, DateTimeKind.Local).AddTicks(8991),
                            CreatedBy = "Seed",
                            Email = "sam@fox.com",
                            FirstName = "Sam",
                            LastName = "Fox",
                            Modified = new DateTime(2023, 10, 15, 21, 36, 40, 559, DateTimeKind.Local).AddTicks(8993),
                            ModifiedBy = "Seed",
                            PostalCode = "V4F 1M7",
                            Street = "457 Fox Avenue"
                        },
                        new
                        {
                            AccountNo = 3,
                            City = "Delta",
                            Country = "Canada",
                            Created = new DateTime(2023, 10, 15, 21, 36, 40, 559, DateTimeKind.Local).AddTicks(8996),
                            CreatedBy = "Seed",
                            Email = "ann@day.com",
                            FirstName = "Ann",
                            LastName = "Day",
                            Modified = new DateTime(2023, 10, 15, 21, 36, 40, 559, DateTimeKind.Local).AddTicks(9002),
                            ModifiedBy = "Seed",
                            PostalCode = "V6G 1M6",
                            Street = "231 River Road"
                        });
                });

            modelBuilder.Entity("comp4976_assignment1.Models.Donations", b =>
                {
                    b.Property<int>("TransId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AccountNo")
                        .HasColumnType("INTEGER");

                    b.Property<float>("Amount")
                        .HasColumnType("REAL");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("TEXT");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<int>("PaymentMethodId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TransactionTypeId")
                        .HasColumnType("INTEGER");

                    b.HasKey("TransId");

                    b.HasIndex("AccountNo");

                    b.HasIndex("PaymentMethodId");

                    b.HasIndex("TransactionTypeId");

                    b.ToTable("Donations", (string)null);

                    b.HasData(
                        new
                        {
                            TransId = 1,
                            AccountNo = 1,
                            Amount = 100f,
                            Created = new DateTime(2023, 10, 15, 21, 36, 40, 559, DateTimeKind.Local).AddTicks(9290),
                            CreatedBy = "Seed",
                            Date = new DateTime(2023, 10, 15, 21, 36, 40, 559, DateTimeKind.Local).AddTicks(9281),
                            Modified = new DateTime(2023, 10, 15, 21, 36, 40, 559, DateTimeKind.Local).AddTicks(9292),
                            ModifiedBy = "Seed",
                            Notes = "This is a first donation",
                            PaymentMethodId = 1,
                            TransactionTypeId = 1
                        },
                        new
                        {
                            TransId = 2,
                            AccountNo = 2,
                            Amount = 100f,
                            Created = new DateTime(2023, 10, 15, 21, 36, 40, 559, DateTimeKind.Local).AddTicks(9296),
                            CreatedBy = "Seed",
                            Date = new DateTime(2023, 10, 15, 21, 36, 40, 559, DateTimeKind.Local).AddTicks(9294),
                            Modified = new DateTime(2023, 10, 15, 21, 36, 40, 559, DateTimeKind.Local).AddTicks(9298),
                            ModifiedBy = "Seed",
                            Notes = "This is a second donation",
                            PaymentMethodId = 1,
                            TransactionTypeId = 2
                        },
                        new
                        {
                            TransId = 3,
                            AccountNo = 3,
                            Amount = 100f,
                            Created = new DateTime(2023, 10, 15, 21, 36, 40, 559, DateTimeKind.Local).AddTicks(9302),
                            CreatedBy = "Seed",
                            Date = new DateTime(2023, 10, 15, 21, 36, 40, 559, DateTimeKind.Local).AddTicks(9300),
                            Modified = new DateTime(2023, 10, 15, 21, 36, 40, 559, DateTimeKind.Local).AddTicks(9303),
                            ModifiedBy = "Seed",
                            Notes = "This is a third donation",
                            PaymentMethodId = 1,
                            TransactionTypeId = 3
                        });
                });

            modelBuilder.Entity("comp4976_assignment1.Models.PaymentMethod", b =>
                {
                    b.Property<int>("PaymentMethodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("TEXT");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("PaymentMethodId");

                    b.ToTable("PaymentMethod", (string)null);

                    b.HasData(
                        new
                        {
                            PaymentMethodId = 1,
                            Created = new DateTime(2023, 10, 15, 21, 36, 40, 559, DateTimeKind.Local).AddTicks(9210),
                            CreatedBy = "Seed",
                            Modified = new DateTime(2023, 10, 15, 21, 36, 40, 559, DateTimeKind.Local).AddTicks(9214),
                            ModifiedBy = "Seed",
                            Name = "Credit Card"
                        },
                        new
                        {
                            PaymentMethodId = 2,
                            Created = new DateTime(2023, 10, 15, 21, 36, 40, 559, DateTimeKind.Local).AddTicks(9217),
                            CreatedBy = "Seed",
                            Modified = new DateTime(2023, 10, 15, 21, 36, 40, 559, DateTimeKind.Local).AddTicks(9218),
                            ModifiedBy = "Seed",
                            Name = "PayPal"
                        },
                        new
                        {
                            PaymentMethodId = 3,
                            Created = new DateTime(2023, 10, 15, 21, 36, 40, 559, DateTimeKind.Local).AddTicks(9225),
                            CreatedBy = "Seed",
                            Modified = new DateTime(2023, 10, 15, 21, 36, 40, 559, DateTimeKind.Local).AddTicks(9226),
                            ModifiedBy = "Seed",
                            Name = "Debit Card"
                        });
                });

            modelBuilder.Entity("comp4976_assignment1.Models.TransactionType", b =>
                {
                    b.Property<int>("TransactionTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("TEXT");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("TransactionTypeId");

                    b.ToTable("TransactionType", (string)null);

                    b.HasData(
                        new
                        {
                            TransactionTypeId = 1,
                            Created = new DateTime(2023, 10, 15, 21, 36, 40, 559, DateTimeKind.Local).AddTicks(9243),
                            CreatedBy = "Seed",
                            Description = "Donations made without any special purpose",
                            Modified = new DateTime(2023, 10, 15, 21, 36, 40, 559, DateTimeKind.Local).AddTicks(9245),
                            ModifiedBy = "Seed",
                            Name = "General Donation"
                        },
                        new
                        {
                            TransactionTypeId = 2,
                            Created = new DateTime(2023, 10, 15, 21, 36, 40, 559, DateTimeKind.Local).AddTicks(9248),
                            CreatedBy = "Seed",
                            Description = "Donations made for homeless people",
                            Modified = new DateTime(2023, 10, 15, 21, 36, 40, 559, DateTimeKind.Local).AddTicks(9264),
                            ModifiedBy = "Seed",
                            Name = "Food for homeless"
                        },
                        new
                        {
                            TransactionTypeId = 3,
                            Created = new DateTime(2023, 10, 15, 21, 36, 40, 559, DateTimeKind.Local).AddTicks(9266),
                            CreatedBy = "Seed",
                            Description = "Donations for the purpose of upgrading the gym",
                            Modified = new DateTime(2023, 10, 15, 21, 36, 40, 559, DateTimeKind.Local).AddTicks(9268),
                            ModifiedBy = "Seed",
                            Name = "Repair of Gym"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("comp4976_assignment1.Models.Donations", b =>
                {
                    b.HasOne("comp4976_assignment1.Models.ContactList", "ContactList")
                        .WithMany()
                        .HasForeignKey("AccountNo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("comp4976_assignment1.Models.PaymentMethod", "PaymentMethod")
                        .WithMany()
                        .HasForeignKey("PaymentMethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("comp4976_assignment1.Models.TransactionType", "TransactionType")
                        .WithMany()
                        .HasForeignKey("TransactionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ContactList");

                    b.Navigation("PaymentMethod");

                    b.Navigation("TransactionType");
                });
#pragma warning restore 612, 618
        }
    }
}
